/**
 * @typedef {import('unified').Processor} Processor
 * @typedef {import('unified').PluggableList} PluggableList
 * @typedef {import('./plugin/recma-document').RecmaDocumentOptions} RecmaDocumentOptions
 * @typedef {import('./plugin/recma-stringify').RecmaStringifyOptions} RecmaStringifyOptions
 * @typedef {import('./plugin/recma-jsx-rewrite').RecmaJsxRewriteOptions} RecmaJsxRewriteOptions
 *
 * @typedef BaseProcessorOptions
 * @property {boolean} [jsx=false] Whether to keep JSX
 * @property {'mdx' | 'md'} [format='mdx'] Format of the files to be processed
 * @property {'program' | 'function-body'} [outputFormat='program'] Whether to compile to a whole program or a function body.
 * @property {string[]} [mdExtensions] Extensions (with `.`) for markdown
 * @property {string[]} [mdxExtensions] Extensions (with `.`) for MDX
 * @property {PluggableList} [recmaPlugins] List of recma (esast, JavaScript) plugins
 * @property {PluggableList} [remarkPlugins] List of remark (mdast, markdown) plugins
 * @property {PluggableList} [rehypePlugins] List of rehype (hast, HTML) plugins
 *
 * @typedef {Omit<RecmaDocumentOptions & RecmaStringifyOptions & RecmaJsxRewriteOptions, 'outputFormat'>} PluginOptions
 * @typedef {BaseProcessorOptions & PluginOptions} ProcessorOptions
 */
/**
 * Pipeline to:
 *
 * 1. Parse MDX (serialized markdown with embedded JSX, ESM, and  expressions)
 * 2. Transform through remark (mdast), rehype (hast), and recma (esast)
 * 3. Serialize as JavaScript
 *
 * @param {ProcessorOptions} [options]
 * @return {Processor}
 */
export function createProcessor(options?: ProcessorOptions): Processor;
export type Processor = import('unified').Processor;
export type PluggableList = import('unified').PluggableList;
export type RecmaDocumentOptions = import('./plugin/recma-document').RecmaDocumentOptions;
export type RecmaStringifyOptions = import('./plugin/recma-stringify').RecmaStringifyOptions;
export type RecmaJsxRewriteOptions = import('./plugin/recma-jsx-rewrite').RecmaJsxRewriteOptions;
export type BaseProcessorOptions = {
    /**
     * Whether to keep JSX
     */
    jsx?: boolean;
    /**
     * Format of the files to be processed
     */
    format?: 'mdx' | 'md';
    /**
     * Whether to compile to a whole program or a function body.
     */
    outputFormat?: 'program' | 'function-body';
    /**
     * Extensions (with `.`) for markdown
     */
    mdExtensions?: string[];
    /**
     * Extensions (with `.`) for MDX
     */
    mdxExtensions?: string[];
    /**
     * List of recma (esast, JavaScript) plugins
     */
    recmaPlugins?: PluggableList;
    /**
     * List of remark (mdast, markdown) plugins
     */
    remarkPlugins?: PluggableList;
    /**
     * List of rehype (hast, HTML) plugins
     */
    rehypePlugins?: PluggableList;
};
export type PluginOptions = Omit<RecmaDocumentOptions & RecmaStringifyOptions & RecmaJsxRewriteOptions, 'outputFormat'>;
export type ProcessorOptions = BaseProcessorOptions & PluginOptions;
