/**
 * @typedef {import('vfile').VFileCompatible} VFileCompatible
 * @typedef {import('vfile').VFile} VFile
 * @typedef {import('./core').PluginOptions} PluginOptions
 * @typedef {import('./core').BaseProcessorOptions} BaseProcessorOptions
 * @typedef {Omit<BaseProcessorOptions, 'format'>} CoreProcessorOptions
 *
 * @typedef ExtraOptions
 * @property {'detect' | 'mdx' | 'md'} [format='detect'] Format of `file`
 *
 * @typedef {CoreProcessorOptions & PluginOptions & ExtraOptions} CompileOptions
 */
/**
 * Compile MDX to JS.
 *
 * @param {VFileCompatible} vfileCompatible MDX document to parse (`string`, `Buffer`, `vfile`, anything that can be given to `vfile`)
 * @param {CompileOptions} [compileOptions]
 * @return {Promise<VFile>}
 */
export function compile(vfileCompatible: VFileCompatible, compileOptions?: CompileOptions): Promise<VFile>;
/**
 * Synchronously compile MDX to JS.
 *
 * @param {VFileCompatible} vfileCompatible MDX document to parse (`string`, `Buffer`, `vfile`, anything that can be given to `vfile`)
 * @param {CompileOptions} [compileOptions]
 * @return {VFile}
 */
export function compileSync(vfileCompatible: VFileCompatible, compileOptions?: CompileOptions): VFile;
export type VFileCompatible = import('vfile').VFileCompatible;
export type VFile = import('vfile').VFile;
export type PluginOptions = import('./core').PluginOptions;
export type BaseProcessorOptions = import('./core').BaseProcessorOptions;
export type CoreProcessorOptions = Omit<BaseProcessorOptions, 'format'>;
export type ExtraOptions = {
    /**
     * Format of `file`
     */
    format?: 'detect' | 'mdx' | 'md';
};
export type CompileOptions = CoreProcessorOptions & PluginOptions & ExtraOptions;
