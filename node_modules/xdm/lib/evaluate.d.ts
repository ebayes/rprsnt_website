/**
 * @typedef {import('vfile').VFileCompatible} VFileCompatible
 * @typedef {import('./util/resolve-evaluate-options.js').EvaluateOptions} EvaluateOptions
 *
 * @typedef {{[name: string]: any}} ComponentMap
 * @typedef {{[props: string]: any, components?: ComponentMap}} MDXContentProps
 * @typedef {{[exports: string]: unknown, default: (props: MDXContentProps) => any}} ExportMap
 */
/**
 * Evaluate MDX.
 *
 * @param {VFileCompatible} vfileCompatible MDX document to parse (`string`, `Buffer`, `vfile`, anything that can be given to `vfile`)
 * @param {EvaluateOptions} evaluateOptions
 * @return {Promise<ExportMap>}
 */
export function evaluate(vfileCompatible: VFileCompatible, evaluateOptions: EvaluateOptions): Promise<ExportMap>;
/**
 * Synchronously evaluate MDX.
 *
 * @param {VFileCompatible} vfileCompatible MDX document to parse (`string`, `Buffer`, `vfile`, anything that can be given to `vfile`)
 * @param {EvaluateOptions} evaluateOptions
 * @return {ExportMap}
 */
export function evaluateSync(vfileCompatible: VFileCompatible, evaluateOptions: EvaluateOptions): ExportMap;
export type VFileCompatible = import('vfile').VFileCompatible;
export type EvaluateOptions = import('./util/resolve-evaluate-options.js').EvaluateOptions;
export type ComponentMap = {
    [name: string]: any;
};
export type MDXContentProps = {
    [props: string]: any;
    components?: ComponentMap;
};
export type ExportMap = {
    [exports: string]: unknown;
    default: (props: MDXContentProps) => any;
};
