/**
 * @typedef RecmaDocumentOptions
 * @property {'program' | 'function-body'} [outputFormat='program'] Whether to use either `import` and `export` statements to get the runtime (and optionally provider) and export the content, or get values from `arguments` and return things
 * @property {boolean} [useDynamicImport=false] Whether to keep `import` (and `export … from`) statements or compile them to dynamic `import()` instead
 * @property {string} [baseUrl] Resolve relative `import` (and `export … from`) relative to this URL
 * @property {string} [pragma='React.createElement'] Pragma for JSX (used in classic runtime)
 * @property {string} [pragmaFrag='React.Fragment'] Pragma for JSX fragments (used in classic runtime)
 * @property {string} [pragmaImportSource='react'] Where to import the identifier of `pragma` from (used in classic runtime)
 * @property {string} [jsxImportSource='react'] Place to import automatic JSX runtimes from (used in automatic runtime)
 * @property {'automatic' | 'classic'} [jsxRuntime='automatic'] JSX runtime to use
 */
/**
 * A plugin to wrap the estree in `MDXContent`.
 *
 * @param {RecmaDocumentOptions} [options]
 */
export function recmaDocument(options?: RecmaDocumentOptions): (tree: any, file: import('vfile').VFile) => void;
export type RecmaDocumentOptions = {
    /**
     * Whether to use either `import` and `export` statements to get the runtime (and optionally provider) and export the content, or get values from `arguments` and return things
     */
    outputFormat?: 'program' | 'function-body';
    /**
     * Whether to keep `import` (and `export … from`) statements or compile them to dynamic `import()` instead
     */
    useDynamicImport?: boolean;
    /**
     * Resolve relative `import` (and `export … from`) relative to this URL
     */
    baseUrl?: string;
    /**
     * Pragma for JSX (used in classic runtime)
     */
    pragma?: string;
    /**
     * Pragma for JSX fragments (used in classic runtime)
     */
    pragmaFrag?: string;
    /**
     * Where to import the identifier of `pragma` from (used in classic runtime)
     */
    pragmaImportSource?: string;
    /**
     * Place to import automatic JSX runtimes from (used in automatic runtime)
     */
    jsxImportSource?: string;
    /**
     * JSX runtime to use
     */
    jsxRuntime?: 'automatic' | 'classic';
};
